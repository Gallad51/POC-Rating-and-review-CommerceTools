name: PR Preview Cleanup

on:
  pull_request:
    types: [closed]
    branches: [main]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID || 'ratings-reviews-poc' }}
  REGION: ${{ vars.GCP_REGION || 'europe-west1' }}
  SERVICE_NAME: ratings-reviews

jobs:
  cleanup:
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      id-token: write
      pull-requests: write

    steps:
    - name: Generate PR environment name
      id: env
      run: |
        PR_NUMBER=${{ github.event.number }}
        BRANCH_NAME=$(echo "${{ github.head_ref }}" | sed 's/[^a-zA-Z0-9]/-/g' | tr '[:upper:]' '[:lower:]' | sed 's/^-\+\|-\+$//g' | cut -c1-20)
        ENV_NAME="pr-${PR_NUMBER}-${BRANCH_NAME}"
        # Ensure service names comply with Cloud Run naming requirements (lowercase, alphanumeric and hyphens, max 63 chars)
        BACKEND_SERVICE=$(echo "${SERVICE_NAME}-backend-${ENV_NAME}" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9-]/-/g' | sed 's/--*/-/g' | sed 's/^-\|-$//g' | cut -c1-63)
        FRONTEND_SERVICE=$(echo "${SERVICE_NAME}-frontend-${ENV_NAME}" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9-]/-/g' | sed 's/--*/-/g' | sed 's/^-\|-$//g' | cut -c1-63)
        echo "env_name=${ENV_NAME}" >> $GITHUB_OUTPUT
        echo "backend_service=${BACKEND_SERVICE}" >> $GITHUB_OUTPUT
        echo "frontend_service=${FRONTEND_SERVICE}" >> $GITHUB_OUTPUT

    - name: Authenticate to Google Cloud
      id: auth
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ env.PROJECT_ID }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.0

    - name: Checkout code
      uses: actions/checkout@v4

    - name: Terraform Init
      run: |
        cd infra
        terraform init

    - name: Terraform Destroy
      env:
        TF_VAR_jwt_secret: ${{ secrets.TF_VAR_jwt_secret || 'mock-jwt-secret-for-preview-environment' }}
        TF_VAR_ctp_project_key: ${{ secrets.TF_VAR_ctp_project_key || '' }}
        TF_VAR_ctp_client_id: ${{ secrets.TF_VAR_ctp_client_id || '' }}
        TF_VAR_ctp_client_secret: ${{ secrets.TF_VAR_ctp_client_secret || '' }}
        TF_VAR_backend_memory: ${{ vars.TF_VAR_backend_memory || '512Mi' }}
        TF_VAR_backend_cpu: ${{ vars.TF_VAR_backend_cpu || '1000m' }}
        TF_VAR_backend_max_instances: ${{ vars.TF_VAR_backend_max_instances || '10' }}
        TF_VAR_rate_limit_max_requests: ${{ vars.TF_VAR_rate_limit_max_requests || '100' }}
        TF_VAR_cors_origin: ${{ vars.TF_VAR_cors_origin || '*' }}
      run: |
        cd infra
        terraform destroy -auto-approve \
          -var="project_id=${{ env.PROJECT_ID }}" \
          -var="region=${{ env.REGION }}" \
          -var="service_name=${{ env.SERVICE_NAME }}" \
          -var="environment=${{ steps.env.outputs.env_name }}" \
          -var="backend_image=gcr.io/${{ env.PROJECT_ID }}/backend:${{ steps.env.outputs.env_name }}" \
          -var="frontend_image=gcr.io/${{ env.PROJECT_ID }}/frontend:${{ steps.env.outputs.env_name }}" \
          -var="create_backend_secrets=false" \
          -var="enable_commercetools=false" \
          -var="backend_min_instances=0" \
        || echo "Terraform destroy completed with warnings (services may not exist)"

    - name: Delete Docker images
      run: |
        # Delete images from Container Registry (ignore errors if images don't exist)
        gcloud container images delete gcr.io/${{ env.PROJECT_ID }}/backend:${{ steps.env.outputs.env_name }} \
          --quiet || echo "Backend image not found or already deleted"
        
        gcloud container images delete gcr.io/${{ env.PROJECT_ID }}/frontend:${{ steps.env.outputs.env_name }} \
          --quiet || echo "Frontend image not found or already deleted"

    - name: Comment PR about cleanup
      uses: actions/github-script@v7
      with:
        script: |
          const { owner, repo } = context.repo;
          const pr_number = context.payload.pull_request.number;
          
          const comment = `## üßπ Preview Environment Cleaned Up
          
          The preview environment for this PR has been successfully cleaned up:
          
          - ‚ùå Backend service \`${{ steps.env.outputs.backend_service }}\` deleted
          - ‚ùå Frontend service \`${{ steps.env.outputs.frontend_service }}\` deleted
          - üóëÔ∏è Docker images removed from registry
          
          Thank you for contributing! üéâ`;
          
          await github.rest.issues.createComment({
            owner,
            repo,
            issue_number: pr_number,
            body: comment
          });