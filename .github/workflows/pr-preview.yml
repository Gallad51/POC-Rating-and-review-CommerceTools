name: PR Preview Deploy

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main]

# Prevent concurrent deployments to the same PR environment
concurrency:
  group: pr-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID || 'ratings-reviews-poc' }}
  REGION: ${{ vars.GCP_REGION || 'europe-west1' }}
  SERVICE_NAME: ratings-reviews

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      id-token: write
      pull-requests: write

    steps:
    - name: Debug workflow info
      run: |
        echo "Workflow run: ${{ github.run_id }}"
        echo "Event: ${{ github.event_name }}"
        echo "PR number: ${{ github.event.pull_request.number }}"
        echo "Ref: ${{ github.ref }}"
        echo "Head ref: ${{ github.head_ref }}"
        
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Generate PR environment name
      id: env
      run: |
        PR_NUMBER=${{ github.event.number }}
        BRANCH_NAME=$(echo "${{ github.head_ref }}" | sed 's/[^a-zA-Z0-9]/-/g' | tr '[:upper:]' '[:lower:]' | sed 's/^-\+\|-\+$//g' | cut -c1-20)
        ENV_NAME="pr-${PR_NUMBER}-${BRANCH_NAME}"
        # Ensure service names comply with Cloud Run naming requirements (lowercase, alphanumeric and hyphens, max 63 chars)
        BACKEND_SERVICE=$(echo "${SERVICE_NAME}-backend-${ENV_NAME}" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9-]/-/g' | sed 's/--*/-/g' | sed 's/^-\|-$//g' | cut -c1-63)
        FRONTEND_SERVICE=$(echo "${SERVICE_NAME}-frontend-${ENV_NAME}" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9-]/-/g' | sed 's/--*/-/g' | sed 's/^-\|-$//g' | cut -c1-63)
        echo "Environment name: ${ENV_NAME}"
        echo "Backend service: ${BACKEND_SERVICE}"
        echo "Frontend service: ${FRONTEND_SERVICE}"
        echo "env_name=${ENV_NAME}" >> $GITHUB_OUTPUT
        echo "backend_service=${BACKEND_SERVICE}" >> $GITHUB_OUTPUT
        echo "frontend_service=${FRONTEND_SERVICE}" >> $GITHUB_OUTPUT

    - name: Authenticate to Google Cloud
      id: auth
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ env.PROJECT_ID }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Install gcloud beta components
      run: |
        gcloud components install beta --quiet

    - name: Configure gcloud project
      run: |
        echo "Project ID: ${{ env.PROJECT_ID }}"
        echo "Region: ${{ env.REGION }}"
        gcloud config set project ${{ env.PROJECT_ID }}
        gcloud config set run/region ${{ env.REGION }}
        gcloud config list

    - name: Configure Docker for GCR
      run: gcloud auth configure-docker

    - name: Build and test backend
      run: |
        cd backend
        npm ci
        npm run build
        npm test || echo "No tests configured for backend"

    - name: Build and test frontend
      run: |
        cd frontend
        npm ci
        npm run build
        npm test || echo "No tests configured for frontend"

    - name: Build backend Docker image
      run: |
        cd backend
        docker build -t gcr.io/${{ env.PROJECT_ID }}/backend:${{ steps.env.outputs.env_name }} .

    - name: Build frontend Docker image
      run: |
        cd frontend
        docker build -t gcr.io/${{ env.PROJECT_ID }}/frontend:${{ steps.env.outputs.env_name }} .

    - name: Push Docker images
      run: |
        docker push gcr.io/${{ env.PROJECT_ID }}/backend:${{ steps.env.outputs.env_name }}
        docker push gcr.io/${{ env.PROJECT_ID }}/frontend:${{ steps.env.outputs.env_name }}

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.0

    - name: Terraform Init
      run: |
        cd infra
        terraform init

    - name: Terraform Plan
      env:
        TF_VAR_jwt_secret: ${{ secrets.TF_VAR_jwt_secret || 'mock-jwt-secret-for-preview-environment' }}
        TF_VAR_ctp_project_key: ${{ secrets.TF_VAR_ctp_project_key || '' }}
        TF_VAR_ctp_client_id: ${{ secrets.TF_VAR_ctp_client_id || '' }}
        TF_VAR_ctp_client_secret: ${{ secrets.TF_VAR_ctp_client_secret || '' }}
        TF_VAR_backend_memory: ${{ vars.TF_VAR_backend_memory || '512Mi' }}
        TF_VAR_backend_cpu: ${{ vars.TF_VAR_backend_cpu || '1000m' }}
        TF_VAR_backend_max_instances: ${{ vars.TF_VAR_backend_max_instances || '10' }}
        TF_VAR_rate_limit_max_requests: ${{ vars.TF_VAR_rate_limit_max_requests || '100' }}
        TF_VAR_cors_origin: ${{ vars.TF_VAR_cors_origin || '*' }}
      run: |
        cd infra
        terraform plan \
          -var="project_id=${{ env.PROJECT_ID }}" \
          -var="region=${{ env.REGION }}" \
          -var="service_name=${{ env.SERVICE_NAME }}" \
          -var="environment=${{ steps.env.outputs.env_name }}" \
          -var="backend_image=gcr.io/${{ env.PROJECT_ID }}/backend:${{ steps.env.outputs.env_name }}" \
          -var="frontend_image=gcr.io/${{ env.PROJECT_ID }}/frontend:${{ steps.env.outputs.env_name }}" \
          -var="create_backend_secrets=false" \
          -var="enable_commercetools=false" \
          -var="backend_min_instances=0" \
          -out=tfplan

    - name: Terraform Apply
      env:
        TF_VAR_jwt_secret: ${{ secrets.TF_VAR_jwt_secret || 'mock-jwt-secret-for-preview-environment' }}
        TF_VAR_ctp_project_key: ${{ secrets.TF_VAR_ctp_project_key || '' }}
        TF_VAR_ctp_client_id: ${{ secrets.TF_VAR_ctp_client_id || '' }}
        TF_VAR_ctp_client_secret: ${{ secrets.TF_VAR_ctp_client_secret || '' }}
        TF_VAR_backend_memory: ${{ vars.TF_VAR_backend_memory || '512Mi' }}
        TF_VAR_backend_cpu: ${{ vars.TF_VAR_backend_cpu || '1000m' }}
        TF_VAR_backend_max_instances: ${{ vars.TF_VAR_backend_max_instances || '10' }}
        TF_VAR_rate_limit_max_requests: ${{ vars.TF_VAR_rate_limit_max_requests || '100' }}
        TF_VAR_cors_origin: ${{ vars.TF_VAR_cors_origin || '*' }}
      run: |
        cd infra
        terraform apply tfplan

    - name: Get service URLs from Terraform outputs
      id: urls
      run: |
        cd infra
        BACKEND_URL=$(terraform output -raw backend_url 2>/dev/null || echo "")
        FRONTEND_URL=$(terraform output -raw frontend_url 2>/dev/null || echo "")
        
        # Fallback to gcloud if Terraform outputs are not available
        if [ -z "$BACKEND_URL" ]; then
          BACKEND_URL=$(gcloud run services describe ${{ steps.env.outputs.backend_service }} --region=${{ env.REGION }} --format='value(status.url)' 2>/dev/null || echo "")
        fi
        if [ -z "$FRONTEND_URL" ]; then
          FRONTEND_URL=$(gcloud run services describe ${{ steps.env.outputs.frontend_service }} --region=${{ env.REGION }} --format='value(status.url)' 2>/dev/null || echo "")
        fi
        
        echo "backend_url=${BACKEND_URL}" >> $GITHUB_OUTPUT
        echo "frontend_url=${FRONTEND_URL}" >> $GITHUB_OUTPUT

    - name: Test deployments
      run: |
        echo "Testing backend health check..."
        curl -f ${{ steps.urls.outputs.backend_url }}/health || exit 1
        
        echo "Testing frontend health check..."
        curl -f ${{ steps.urls.outputs.frontend_url }}/health || exit 1
        
        echo "Testing backend API..."
        curl -f ${{ steps.urls.outputs.backend_url }}/api/reviews/health || exit 1

    - name: Comment PR with preview URLs
      uses: actions/github-script@v7
      with:
        script: |
          const { owner, repo } = context.repo;
          const pr_number = context.payload.pull_request.number;
          
          const comment = `## 🚀 Preview Deployment Ready!
          
          Your PR has been deployed to preview environments:
          
          | Service | URL | Status |
          |---------|-----|--------|
          | 🎯 **Frontend** | [${{ steps.urls.outputs.frontend_url }}](${{ steps.urls.outputs.frontend_url }}) | ✅ |
          | 🔧 **Backend API** | [${{ steps.urls.outputs.backend_url }}](${{ steps.urls.outputs.backend_url }}) | ✅ |
          
          ### Quick Links:
          - 🌐 [Preview App](${{ steps.urls.outputs.frontend_url }})
          - 📊 [Backend Health](${{ steps.urls.outputs.backend_url }}/health)
          - 🔍 [API Ratings](${{ steps.urls.outputs.backend_url }}/api/reviews/health)
          
          ### Environment Details:
          - **Environment**: \`${{ steps.env.outputs.env_name }}\`
          - **Region**: \`${{ env.REGION }}\`
          - **Auto-cleanup**: Environments are automatically cleaned up when PR is closed
          
          > 💡 **Note**: This is a POC deployment using only GCP free tier services (Cloud Run).`;
          
          // Find existing comment to update or create new one
          const comments = await github.rest.issues.listComments({
            owner,
            repo,
            issue_number: pr_number,
          });
          
          const existingComment = comments.data.find(comment => 
            comment.body.includes('Preview Deployment Ready!')
          );
          
          if (existingComment) {
            await github.rest.issues.updateComment({
              owner,
              repo,
              comment_id: existingComment.id,
              body: comment
            });
          } else {
            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number: pr_number,
              body: comment
            });
          }